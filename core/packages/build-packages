#!/bsn/bash
export DIBAB_PREFIX=$HOME
export SRC_PATH=$PWD

. ../scripts/includes/build

install -d $HOME/tmp
export TMPDIR=$HOME/tmp

[ -e /tmp/break ] && rm /tmp/break
# tail -f /dev/null

install -d $HOME/opkg/share/aclocal
install -d $HOME/opkg/share/pixmaps

git config --global url."https://".insteadOf git://
git config --global url."https://bitbucket.org".insteadOf git+https://bitbucket.org
git config --global url."https://git.gnu.org.ua".insteadOf git+https://git.gnu.org.ua
git config --global url."https://github.com".insteadOf git+https://github.com
git config --global url."https://git.kernel.org".insteadOf git+https://git.kernel.org
git config --global url."https://gitlab.gnome.org".insteadOf git+https://gitlab.gnome.org
git config --global url."https://git.savannah.gnu.org".insteadOf git+https://git.savannah.gnu.org
git config --global url."https://sourceware.org".insteadOf git+https://sourceware.org
git config --global url."https://gitlab.freedesktop.org".insteadOf  git+https://gitlab.freedesktop.org
# git config --global url."https://github.com".insteadOf ncurses::git+https://github.com

echo $SRC_PATH/list-$1
# normalement c'est un double crochet, le simple crochet est utilisé pour des raisons de compatibilité
# -n ch vraie si la longueur de la chaîne ch est différente de zéro.
# si donc "$1" n'est pas nulle (donc la distribution particulière précisée) et si le fichier $SRC_PATH/list-$1 exist
# alors on va chercher à faire l'ISO spécifique ou l'ISO générale de l'architecture demandée
if [ -n "$1" ] && [ -e $SRC_PATH/list-$1 ]
then
export MODULE=$1
else
export MODULE=$ARCH
fi

[ "$MODULE" = "kde" ] && [ "$ARCH" = "x86" ] && cp $HOME/x86/include/harfbuzz/* $HOME/x86/include 
[ "$MODULE" = "kde" ] && [ "$ARCH" = "x86" ] && [ -e $HOME/x86/lib/x86_64-linux-gnu/libKF5Screen.so.7 ] && [ ! -e $HOME/x86/lib/libKF5Screen.so.7 ] && echo "Link $HOME/x86/lib/libKF5Screen.so.7" && sleep 10 && ln -s $HOME/x86/lib/x86_64-linux-gnu/libKF5Screen.so.7 $HOME/x86/lib/libKF5Screen.so.7 
[ "$MODULE" = "virtualbox" ] && [ "$ARCH" = "x86" ] && echo "$MODULE disabled for $ARCH" && exit 0
# 2 commandes pour Freetype
[ ! -e $HOME/$ARCH/include/freetype ] && install -d $HOME/$ARCH/include/freetype2 && ln -s $HOME/$ARCH/include/freetype2 $HOME/$ARCH/include/freetype

# destruction des variables d'environnement citées
unset CLEARENV XDG_DATA_DIRS PKG_CONFIG_PATH CFLAGS CXXFLAGS CPPFLAGS LDFLAGS LD_LIBRARY_PATH PYTHONPATH PERL PYTHON

export XDG_DATA_DIRS="/usr/share"

# $1 est supposée être une ISO particulière demandée passée en paramètre, lanpower, par exemple: pourquoi est-ce "uclib" ici ? 
# Sinon, La ligne 14 "echo $SRC_PATH/list-$1" donne n'importe quoi
[ "$1" = "uclib" ] && export CC=$HOME/ydfs/x-tools/i386-unknown-linux-uclibc/bin/i386-unknown-linux-uclibc-gcc
# initialisation du chemin pour le compilateur C x86
[ "$ARCH" = "x86" ] && [ "$CC" = "" ] && export CC=`which gcc`
[ "$ARCH" = "x86" ] && export GIT_SSL_NO_VERIFY=1

CMAKE_PREFIX_PATH=$HOME/$ARCH
# initialisation de variables
MODULEPATH=""
export ACLOCAL="aclocal"
export KF5="$HOME/kde"
export CMAKE_PREFIX_PATH=$KF5:$CMAKE_PREFIX_PATH

# $1 a été mis dans $MODULE ci-dessus. Si list-$MODULE n'existe pas on sort : OK
[ ! -e list-$MODULE ] && echo "$PWD/list-$MODULE not found !" && exit 1
[ $MODULE != "ARCH" ] && MODULE_LIST="$MODULE $ARCH"
[ -e list-$MODULE.deps ] && MODULE_LIST="`cat list-$MODULE.deps` $MODULE_LIST"
echo " Module list : $MODULE_LIST"
[ -e $HOME/$ARCH/bin/qmake ] && ln -sf $HOME/$ARCH/bin/qmake $HOME/$ARCH/bin/qmake-qt5
CPPFLAGS=" -I$HOME/$ARCH/include $CPPFLAGS"
for QTINC in QtSvg QtTest QtPrintSupport QtOpenG QtX11Extra QtGui QtWidgets
do
  CPPFLAGS="$CPPFLAGS -I$HOME/$ARCH/include/qt/$QTINC"
  install -d $HOME/$ARCH/include/qt/$QTINC
done
export RCC=`which rcc`
export MOC=`which moc`
export UIC=`which uic`
# boucle sur l'ensemble des modules 
for MODULE in $MODULE_LIST
do
[ "$MODULE" = "updates" ] && MODULE=$ARCH
# echo "PATH is $PATH"
export ACLOCAL_FLAGS=" -I $HOME/$MODULE/share/aclocal/  -I $HOME/$ARCH/share/aclocal/ -I $HOME/opkg/share/aclocal/"
#echo "ACLOCAL_FLAGS is $ACLOCAL_FLAGS"
# création d'un répertoire
[ ! -e $HOME/$MODULE/share/aclocal ] && install -d $HOME/$MODULE/share/aclocal
# initialisations des variables utilisées 
install -d $HOME/ydfs/CFLAGS
install -d $HOME/ydfs/CPPFLAGS
install -d $HOME/ydfs/CPPFLAGS
export CMAKE_LIBRARY_PATH=$CMAKE_LIBRARY_PATH:/$HOME/$MODULE/lib:$HOME/$ARCH/lib CMAKE_INCLUDE_PATH=$CMAKE_INCLUDE_PATH:$HOME/$MODULE/include:$HOME/$ARCH/include
export CFLAGS="$CFLAGS -O2 -I. -I""$HOME/$MODULE/include"
export CPPFLAGS="$CPPFLAGS -I""$HOME/$MODULE/include"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$MODULE/include"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$ARCH/include"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$ARCH/include/AL"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$ARCH/include/irrlicht"
export CXXFLAGS="$CXXFLAGS -I""$HOME/$ARCH/include/freetype2"
[ -e /usr/lib/llvm-13/include ] && export CXXFLAGS="$CXXFLAGS -I""/usr/lib/llvm-13/include"
[ ! -e /usr/lib/llvm-13/include ] && export CXXFLAGS="$CXXFLAGS -I""/usr/lib/llvm-11/include"
export LDFLAGS="$LDFLAGS -L""$HOME/$MODULE/lib "
export LDFLAGS="$LDFLAGS -L""$HOME/$MODULE/lib64 "
export LDFLAGS="$LDFLAGS -L""$HOME/$MODULE/lib/x86_64-linux-gnu "
[ -e /usr/lib/llvm-13/lib/ ] && export LDFLAGS="$LDFLAGS -L""/usr/lib/llvm-13/lib/ "
[ ! -e /usr/lib/llvm-13/lib/ ] && export LDFLAGS="$LDFLAGS -L""/usr/lib/llvm-11/lib/ "
export GTKMM_BASEPATH=$HOME/$ARCH
# autres initialisations selon les architectures(processeurs)
[ "$ARCH" = "arm" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$ARCH/lib -Wl,-rpath-link,/home/raspi/ydfs/tools-master/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/arm-linux-gnueabihf/lib" # FIXME
[ "$ARCH" = "x86" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib"
[ "$ARCH" = "x86_64" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib64 -Wl,-rpath-link,$HOME/$MODULE/lib"
[ "$ARCH" = "x86" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/i386-linux-gnu -Wl,-rpath-link,$HOME/$MODULE/lib"
[ "$ARCH" = "x86_64" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib/x86_64-linux-gnu -Wl,-rpath-link,$HOME/$MODULE/lib"
[ "$ARCH" = "x86" ] && export LDFLAGS="$LDFLAGS -Wl,-rpath-link,$HOME/$MODULE/lib/i386-linux-gnu -Wl,-rpath-link,$HOME/$MODULE/lib"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/$MODULE/lib"
[ "$ARCH" = "x86_64" ] && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/$MODULE/lib64" 
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/$MODULE/lib/x86_64-linux-gnu" 
[ "$ARCH" = "x86" ] && export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$HOME/$MODULE/lib/i386-linux-gnu" 
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/$MODULE/lib/pkgconfig/:$HOME/$MODULE/share/pkgconfig"
export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/linuxconsole/share/pkgconfig/:$HOME/linuxconsole/lib/pkgconfig/"
MODULEPATH="$HOME/$MODULE/bin/:$HOME/$MODULE/sbin/:$MODULEPATH"
[ "$ARCH" = "x86_64" ] && export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/$MODULE/lib/x86_64-linux-gnu/pkgconfig:$HOME/$MODULE/lib64/pkgconfig"
[ "$ARCH" = "x86" ] && export PKG_CONFIG_PATH="$PKG_CONFIG_PATH:$HOME/$MODULE/lib/i386-linux-gnu/pkgconfig"
export XDG_DATA_DIRS="$HOME/$MODULE/share/:$XDG_DATA_DIRS"
[ "$MODULE" = "qt" ] && export QMAKESPEC=linux-g++ && export QMAKE_CFLAGS="$CFLAGS" && unset CFLAGS
done

# echo "SET PATH"
if [ "$ARCH" = "arm" ]
then
PATH=$PWD:$PATH
else
PATH=$PWD:$HOME/Qt5/5.4/gcc/bin:$MODULEPATH:$PATH:
fi
PATH=$HOME/ydfs/llvm-clang/bin/:$PATH
test -n "$1" && MODULE="$1"
# build tar
	
install -d $HOME/$ARCH/bin/

[ -e /usr/bin/clang++-13 ] && [ ! -e $HOME/$ARCH/bin/clang++ ] && ln -s /usr/bin/clang++-13 $HOME/$ARCH/bin/clang++
[ -e /usr/bin/clang-13 ] && [ ! -e $HOME/$ARCH/bin/clang ] && ln -s /usr/bin/clang-13 $HOME/$ARCH/bin/clang
[ -e /usr/bin/llvm-nm-13 ] && [ ! -e $HOME/$ARCH/bin/llvm-nm ] && ln -s /usr/bin/llvm-nm-13 $HOME/$ARCH/bin/llvm-nm

whoami | grep root && export FORCE_UNSAFE_CONFIGURE=1

# initialisation de différents variables pour la compilation
export PYTHONPATH=$DIBAB_PREFIX/$ARCH/lib/python3.8/site-packages:$DIBAB_PREFIX/$MODULE/lib/python3.8/site-packages
export MAKE=`which make` MSGFMT=`which msgfmt` MSGMERGE=`which msgmerge` XGETTEXT=`which xgettext`

export PYTHON_PREFIX=$DIBAB_PREFIX/$MODULE/
export LIB_CUPS=$DIBAB_PREFIX/$ARCH/lib
export CUPS_ETC=$DIBAB_PREFIX/$ARCH/etc

# la variable LIST n'est pas initialisée ici dans build-packages, mais c'est MODULE en fait mais aussi $1 (le premier paramètre)
# on initialise LIST2 avec $SRC_PATH/list-$LIST sauf si $1 est non vide alors LIST2=$SRC_PATH/list-$1 , mais LIST est définie où ?
LIST2=$SRC_PATH/list-$LIST
[ -n "$1" ] && [ -e $SRC_PATH/list-$1 ] && LIST2=$SRC_PATH/list-$1

[ -e $HOME/ydfs-error ] && rm $HOME/ydfs-error
echo $HOME_DIBAB/scripts/first-env
$HOME_DIBAB/scripts/first-env

readarray -t PACKAGE < $LIST2 || exit $?
COUNT=0
for i in ${!PACKAGE[*]}
do 
  ARCHIVE=${PACKAGE[i]}
  COUNT=`echo $((COUNT + 1))`
  [ $COUNT = 1 ] && MAX=`cat $LIST2|wc -l`
  echo 
  echo -n -e "\e[94m$COUNT\e[0m" 
  echo -n "/$MAX : "
  [ "$ARCHIVE" == "#JUMP" ] && touch /tmp/break ] && continue
  [ "$ARCHIVE" == "#STOP" ] && rm /tmp/break && continue
  [ -e /tmp/break ] && continue
  echo "$ARCHIVE" | grep "#SKIP-""$ARCH""#" && continue
  echo "$ARCHIVE" | grep "#END-$DISTRONAME" && break
  echo "$ARCHIVE" | grep "#SKIP-$DISTRONAME" && continue
  echo "$ARCHIVE" | grep "#SKIP-""$ARCH""#" && continue
  echo "$ARCHIVE" | grep "#Games" && export DBEXTRA="games"
  echo "$ARCHIVE" | grep "#Education" && export DBEXTRA="education"
  echo "$ARCHIVE" | grep "#Office" && export DBEXTRA="office"
  echo "$ARCHIVE" | grep "#Drivers" && export DBEXTRA="drivers"
  echo "$ARCHIVE" | grep "#Libs" && export DBEXTRA="libs"
  echo "$ARCHIVE" | grep "#Emulators" && export DBEXTRA="emulators"
  echo "$ARCHIVE" | grep "#Network" && export DBEXTRA="network"
  echo "$ARCHIVE" | grep "#Printer" && export DBEXTRA="printer"
  echo "$ARCHIVE" | grep "#Multimedia" && export DBEXTRA="multimedia"
  echo "$ARCHIVE" | grep "#System" && export DBEXTRA="system"
  echo "$ARCHIVE" | grep "#KDE" && export DBEXTRA="KDE"
  echo "$ARCHIVE" | grep "#Development" && export DBEXTRA="development"
  echo "$ARCHIVE" | grep "#Misc" && export DBEXTRA="misc"
  echo "$ARCHIVE" | grep '#tag' >/dev/null || ARCHIVE_URL=`echo $ARCHIVE | cut -d'#' -f1`
  echo "$ARCHIVE" | grep '#commit' >/dev/null || ARCHIVE_URL=`echo $ARCHIVE | cut -d'#' -f1`
  echo "$ARCHIVE" | grep '#tag' >/dev/null && ARCHIVE_URL=`echo $ARCHIVE`
  echo "$ARCHIVE" | grep '#commit' >/dev/null && ARCHIVE_URL=`echo $ARCHIVE`
  [ "$ARCHIVE_URL" = "" ] && continue
  if [  -n "`echo $ARCHIVE | grep 'archsource:'`" ] 
then
  PKG=`echo $ARCHIVE | cut -d':' -f2`
  $HOME_DIBAB/scripts/get-archpkg $PKG || exit $?
  $HOME_DIBAB/scripts/build-archpkg || exit $?
  exit 0
fi
  if [  -n "`echo $ARCHIVE | grep 'archlinuxpatched:'`" ] 
then
  PKG=`echo $ARCHIVE | cut -d':' -f2`
  $HOME_DIBAB/scripts/get-archpkg $PKG || exit $?
	$HOME_DIBAB/scripts/echo-archpkg $PKG || exit $?
  ARCHIVE=`$HOME_DIBAB/scripts/echo-archpkg $PKG`
  echo "Arch linux source for $PKG : $ARCHIVE_URL"
fi
  if [  -n "`echo $ARCHIVE | grep 'archlinux:'`" ] 
then
  PKG=`echo $ARCHIVE | cut -d':' -f2`
	$HOME_DIBAB/scripts/echo-archpkg $PKG || exit $?
  ARCHIVE=`$HOME_DIBAB/scripts/echo-archpkg $PKG`
  echo "Arch linux source for $PKG : $ARCHIVE_URL"
fi
  DIRNAME=`basename $ARCHIVE_URL |sed "s/.tar.xz//" | sed "s/.tar.bz2//" | sed "s/.tar.gz//"`
  echo "$ARCHIVE" | grep '::' >/dev/null && DIRNAME=`echo $ARCHIVE | cut -d':' -f1 |sed "s/.tar.xz//" | sed "s/.tar.bz2//" | sed "s/.tar.gz//"`
# echo "ARCHIVE_URL : $ARCHIVE_URL $DIRNAME"
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/build-$ARCH/$DIRNAME/"buildok-"$ARCH ] && echo -n "build-$ARCH/$DIRNAME/"buildok-"$ARCH exists" && continue
  [ "$FORCEBUILD" != "OK" ] && [ -e $HOME/ydfs/packages-$ARCH/$DIRNAME ] && echo -n "packages-$ARCH/$DIRNAME exists" && continue
  FIRST=`echo $ARCHIVE | head -c1`
  [ "$FIRST" = '#' ] && echo $ARCHIVE && continue
  echo "$ARCHIVE" | grep '#tag' >/dev/null || echo "$ARCHIVE" | grep '#commit' >/dev/null || ARCHIVE=`echo $ARCHIVE|cut -d'#' -f1`
  [ "$ARCH" = "x86_64" ] && ARCHIVE=`echo $ARCHIVE | sed "s/_i386.deb/_amd64.deb/"`
  [ "$ARCH" = "x86_64" ] && ARCHIVE=`echo $ARCHIVE | sed "s/i586.deb/amd64.deb/"`
  export PKGSRC=$ARCHIVE
  echo -n " $ARCHIVE "
  export MYPREFIX=$DIBAB_PREFIX/$MODULE/
  echo $ARCHIVE | grep grub-2 && unset CPPFLAGS && unset CFLAGS && unset LDFLAGS #export FIRSTENV="OK"
#  echo $ARCHIVE | grep mate-session && export MYPREFIX=$HOME/$ARCH
  echo $ARCHIVE | grep warzone && export CLEARENV="OK"
  echo $ARCHIVE | grep lxpanel && install -d $HOME/ydfs/build-$ARCH/lxpanel/data/ui # FIXME
  if [  -n "`echo $ARCHIVE | grep 'svn://'`" ] 
  then
    cd $HOME/ydfs/src
    SOURCE_DIR=`basename $ARCHIVE | cut -d'.' -f1`
    [ ! -e $SOURCE_DIR ] && svn co $ARCHIVE
    cd $SOURCE_DIR
    [ -e libc ] && cd libc # eglibc
    echo "db-autobuild for svn"
    db-autobuild $DIBAB_PREFIX/$MODULE 2>ydfs-error 1>ydfs-log || exit $?
    continue
  fi
  if [  -n "`echo $ARCHIVE | grep 'lp:'`" ] 
  then
    cd $HOME/ydfs/src
    SOURCE_DIR=`echo $ARCHIVE | cut -d':' -f2`
    [ ! -e $SOURCE_DIR ] && bzr checkout --lightweight $ARCHIVE
    cd $SOURCE_DIR
    echo "db-autobuild for lp"
    #db-autobuild $DIBAB_PREFIX/$MODULE 2>ydfs-error 1>ydfs-log || touch $HOME/ydfs-error
    . $HOME_DIBAB/scripts/includes/build-options
    build_ydfs_package
    [ -e $HOME/ydfs-error ] && echo "Exit $ARCHIVE " && break
    [ -e $HOME/ydfs-error ] && tail ydfs-error && echo "Exit $ARCHIVE " && break
    continue
  fi
  if [  -n "`echo $ARCHIVE | grep 'git://'`" ] || [  -n "`echo $ARCHIVE | grep 'git+https'`" ] || [  -n "`echo $ARCHIVE | grep 'opkg-gtk2.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/virgl/virglrenderer.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/upower/upower.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/pipewire/pipewire.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/pulseaudio/pavucontrol.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/xorg/driver/xf86-video-ati'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.freedesktop.org/geoclue'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/vala.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/sysprof.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/libgnomekbd.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/libgsf.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/mutter.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/libgweather.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/orca.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/libpeas.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/libgtop.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'gnome-settings-daemon.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/NetworkManager-openvpn.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/NetworkManager-pptp.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'https://gitlab.gnome.org/GNOME/gtk-doc.git'`" ] \
	  || [  -n "`echo $ARCHIVE | grep 'git.khaganat.net/khaganat'`" ] 
  then
    ARCHIVE=$(echo $ARCHIVE | sed "s/?signed//")
    ARCHIVE=$(echo $ARCHIVE | sed "s/ncurses::git+https/https/")
    ARCHIVE=$(echo $ARCHIVE | sed "s/expat::git+https/https/")
    ARCHIVE=$(echo $ARCHIVE | sed "s/git+https/https/")
    #echo "$ARCHIVE"
    #exit 1
    cd $HOME/ydfs/src
    # echo $ARCHIVE | grep '#' && REVISION=$(echo $ARCHIVE | cut -d'#' -f2| cut -d= -f2) && ARCHIVE=$(echo $ARCHIVE | cut -d'#' -f1)
    echo $ARCHIVE | grep 'SKIP' && ARCHIVE=$(echo $ARCHIVE | cut -d' ' -f1)
    SOURCE_DIR=`basename $ARCHIVE |cut -d'#' -f1 | cut -d'.' -f1`
    #[ "$SOURCE_DIR" = "core" ] && SOURCE_DIR=libreoffice
    [ "$SOURCE_DIR" = "avldrums" ] && SOURCE_DIR="avldrums.lv2"
    [ -e $SOURCE_DIR/buildok-$ARCH ] && echo -n " $SOURCE_DIR/buildok-$ARCH " && continue
    echo "$SOURCE_DIR"
    if [ "daemonmap" = "$SOURCE_DIR" ]
    then
	git clone --recurse-submodules https://github.com/Unvanquished/daemonmap.git
    else
	    echo "Cloning $ARCHIVE (quiet)"
        [ ! -e $SOURCE_DIR ] && git clone -q `echo $ARCHIVE |cut -d'#' -f1`
    fi
    # [ ! -e $SOURCE_DIR ] &&  [ "$NOTEXIT" = "OK" ] && echo "Clone faild with $0, but we continue " && continue
    cd $SOURCE_DIR
    TAG=`echo $ARCHIVE | grep '#tag' | cut -d'=' -f2`
    COMMIT=`echo $ARCHIVE | grep '#commit' | cut -d'=' -f2`
    if [ "$TAG" != "" ]
    then
	echo "Got to TAG $TAG"
	git checkout -q tags/$TAG 2>/dev/null ||  git checkout -q $TAG || echo "FIXME"  # || exit 1
    fi
    [ "$COMMIT" != "" ] && echo "At commit $COMMIT" &&  git checkout  $COMMIT && sleep 5
    # [ ! -n "$REVISION" ] && git reset --hard $REVISION 
    LC_CONFIGURE_OPTS=""
  . $HOME_DIBAB/scripts/includes/build-options

    [ -e ./data/gala.desktop ] && git cherry-pick -n 85d290c75eaa147b704ad34e6c67498071707ee8
    build_ydfs_package
    [ -e $HOME/ydfs-error ] && [ "$NOTEXIT" = "OK" ] && echo "Build faild with $0, but we continue " && continue
    [ -e $HOME/ydfs-error ] && tail ydfs-error && echo "Exit $ARCHIVE " && break
    continue
  fi

  INSTALLMODE=installfromsrc
  if [  -n "`echo $ARCHIVE | grep 'bin::'`" ] 
  then
    ARCHIVE=`echo $ARCHIVE | cut -d ':' -f3,4,5,6,7,8,9` 
    INSTALLMODE="decompress"
    echo "Binary install to $MYPREFIX"
    install -d $MYPREFIX
  fi

  if [  -n "`echo $ARCHIVE | grep 'pip::'`" ] 
  then
    if [  -n "`echo $ARCHIVE | grep 'requirements.txt'`" ] 
    then
      pip3 install --upgrade pip
      requirements=`echo $ARCHIVE | cut -d ':' -f3,4` 
      [ -e requirements.txt ] && rm requirements.txt
      wget $requirements || exit 41
      echo "Run  pip3 install -r requirements.txt" 
      pip3 install -r requirements.txt || exit 41
    else
      modpython=`echo $ARCHIVE | cut -d ':' -f3` 
      # pip3 install --upgrade pip
      echo "Run  pip3 install $modpython" 
	  pip3 install $modpython || touch $HOME/ydfs-error
          [ -e $HOME/ydfs-error ] && tail ydfs-error && echo "Exit $ARCHIVE " && break
    fi
    continue
  fi

  if [  -n "`echo $ARCHIVE | grep 'CPAN:/'`" ] 
  then
    modperl=`echo $ARCHIVE | cut -d '/' -f2` 
    echo "Run  db-build-modperl $modperl" 
	  SDL_INC=$HOME/$ARCH/include SDL_LIB=$HOME/$ARCH/lib db-build-modperl $modperl || touch $HOME/ydfs-error
    [ -e $HOME/ydfs-error ] && tail ydfs-error && echo "Exit $ARCHIVE " && break
    continue
  fi

  [ -e $HOME/ydfs-error ] && [ "$NOTEXIT" = "OK" ] && echo "Build faild with $0, but we continue " && continue
  [ -e $HOME/ydfs-error ] && echo "Final exit $0 " && break

  if [ -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ]
  then
    test -s $HOME/ydfs/tarballs/`basename $ARCHIVE` || rm $HOME/ydfs/tarballs/`basename $ARCHIVE`
  fi
  [ -e $HOME/ydfs/tarballs/`basename $ARCHIVE`.start ] && [ -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ] && rm $HOME/ydfs/tarballs/`basename $ARCHIVE`

  # First pass, go into source LinuxConsole
  echo
  echo "$ARCHIVE" | grep '::' >/dev/null && ARCHIVE=`echo $ARCHIVE | cut -d':' -f3,4`
  [ ! -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ] && touch $HOME/ydfs/tarballs/`basename $ARCHIVE`.start && echo "Get $ARCHIVE .... " && LD_LIBRARY_PATH="" /usr/bin/wget -q --trust-server-name --tries=5 -w 6 --no-check-certificate --output-document=$HOME/ydfs/tarballs/`basename $ARCHIVE` $ARCHIVE && rm $HOME/ydfs/tarballs/`basename $ARCHIVE`.start
    test -s $HOME/ydfs/tarballs/`basename $ARCHIVE` || rm $HOME/ydfs/tarballs/`basename $ARCHIVE`
   file $HOME/ydfs/tarballs/`basename $ARCHIVE` | grep HTML && rm $HOME/ydfs/tarballs/`basename $ARCHIVE`
  [ ! -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ] && echo " not found " 

  # Second pass, go into LinuxConsole repository
  [ ! -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ] && touch $HOME/ydfs/tarballs/`basename $ARCHIVE`.start && echo && echo -n "Now trying http://jukebox.linuxconsole.org/sources/$(basename $ARCHIVE) ..." && LD_LIBRARY_PATH="" wget -q --trust-server-name --tries=5 -w 6 --no-check-certificate --output-document=$HOME/ydfs/tarballs/`basename $ARCHIVE` http://jukebox.linuxconsole.org/sources/$(basename $ARCHIVE) && rm $HOME/ydfs/tarballs/`basename $ARCHIVE`.start
    test -s $HOME/ydfs/tarballs/`basename $ARCHIVE` || rm $HOME/ydfs/tarballs/`basename $ARCHIVE`
  [ ! -e $HOME/ydfs/tarballs/`basename $ARCHIVE` ] && echo " not found !!!" && echo && touch $HOME/ydfs-error && exit 1

  echo $ARCHIVE | grep xslt && [ -e $DIBAB_PREFIX/$MODULE/include/libxml2/libxml ] && [ ! -e $DIBAB_PREFIX/$MODULE/include/libxml ] && ln -s $DIBAB_PREFIX/$MODULE/include/libxml2/libxml $DIBAB_PREFIX/$MODULE/include

  [ -e $HOME/$ARCH/bin/xmlcatalog  ] && [ ! -e  $HOME/$ARCH/etc/xml/catalog ] && install -d $HOME/$ARCH/etc/xml && ln -s /etc/xml/catalog  $HOME/$ARCH/etc/xml
  # Environment variables

  export CXX="g++"
  [ -e $HOME/$ARCH/include/QtTest ] && export CXX="g++ -I$HOME/$ARCH/include/QtTest -I$HOME/$ARCH/include/QtPrintSupport -I$HOME/$ARCH/include $CFLAGS -I$HOME/$ARCH/include/QtOpenGL -I$HOME/$ARCH/include/QtX11Extras -I$HOME/$ARCH/include/QtGui -I$HOME/$ARCH/include -I$HOME/$ARCH/include/QtWidgets -I$HOME/$ARCH/include/QtCore"
  echo $ARCHIVE | grep warsow && export CFLAGS="$CFLAGS -I""$HOME/$ARCH/include/freetype "
  echo $ARCHIVE | grep efl-1 && unset CXX
#  echo $ARCHIVE | grep icu4c && export CXX="g++ -fPIC"
#  echo $ARCHIVE | grep zlib- && export CC="gcc -fPIC"
  echo $ARCHIVE | grep plib && export CXX="g++ -fPIC"
  echo $ARCHIVE | grep dssi && export CXX="g++ -fPIC -I$HOME/$ARCH/include"
  echo $ARCHIVE | grep perl-5 && export CFLAGS="-I$HOME/$ARCH/include" && export CXXFLAGS=$CFLAGS && export CPPFLAGS=$CFLAGS
  echo $ARCHIVE | grep SDL_Pango && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC"
  echo $ARCHIVE | grep ijs-0 && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC"
  echo $ARCHIVE | grep lzo-2 && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC"
#  echo $ARCHIVE | grep net-snmp && export LDFLAGS="$LDFLAGS -lnl" 
  echo $ARCHIVE | grep fftw && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC"
#  echo $ARCHIVE | grep json-c && export CFLAGS="$CFLAGS -Wno-error"
#  echo $ARCHIVE | grep jasper && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC"
  echo $ARCHIVE | grep foomatic-db-engine && export LIBDIR=$DIBAB_PREFIX/$MODULE/share/foomatic 
  echo $ARCHIVE | grep gtk+-2.24 && export CFLAGS="$CFLAGS -Wl,-rpath-link,$HOME/ydfs/build-x86/gtk+-2.24.9/gdk/.libs/"
  echo $ARCHIVE | grep kino && export CFLAGS=" -I/$HOME/ydfs/src/kino-1.3.4/ffmpeg " && echo "CFLAGS is $CFLAGS" 
  echo $ARCHIVE | grep udev-164 && export CFLAGS="$CFLAGS -Wl,-rpath-link,$HOME/ydfs/build-x86/udev-164/libudev/.libs/"
  echo $ARCHIVE | grep gst-plugins-bad && ln -s $HOME/$ARCH/include/openjpeg-2.2 $HOME/$ARCH/include/openjpeg-2.1
  echo $ARCHIVE | grep dolphin && export CXXFLAGS="$CXXFLAGS "$( pkg-config --cflags gtk+-2.0)
  echo $ARCHIVE | grep ffmpeg-3 && export LDFLAGS="$LDFLAGS -fPIC" && export CFLAGS="$CFLAGS -fPIC" && export CPPFLAGS="$CPPFLAGS -fPIC" && CXXFLAGS="$CXXFLAGS -fPIC"
  echo $ARCHIVE | grep sqlite && export CPPFLAGS="$CPPFLAGS -DSQLITE_ENABLE_COLUMN_METADATA=1 \
                             -DSQLITE_ENABLE_UNLOCK_NOTIFY \
                             -DSQLITE_ENABLE_DBSTAT_VTAB=1 \
                             -DSQLITE_ENABLE_FTS3_TOKENIZER=1 \
                             -DSQLITE_SECURE_DELETE \
                             -DSQLITE_MAX_VARIABLE_NUMBER=250000 \
                             -DSQLITE_MAX_EXPR_DEPTH=10000" 
  echo $ARCHIVE | grep ghostscript && export CPPFLAGS="$CPPFLAGS -Ijpeg/ -Ilibpng -I./freetype/include/freetype" 
  echo $ARCHIVE | grep sqlite || unset AM_CPPFLAGS

  # Build options

  LC_CONFIGURE_OPTS=""

  # . $(dirname $0)/../scripts/includes/build-options
  . $HOME_DIBAB/scripts/includes/build-options


	# echo $ARCHIVE | grep zlib && unset LC_CONFIGURE_OPTS && LCARCHIVE_CHOICE=installfromsrc db-lcarchive $HOME/ydfs/tarballs/`basename $ARCHIVE` && continue
	# Build now

	# echo -n  " (db-lcarchive) "
	# echo -n  " .. Running db-lcarchive $HOME/ydfs/tarballs/$(basename $ARCHIVE)"
	DBKVER=$KERNEL3 LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS" LCARCHIVE_CHOICE=$INSTALLMODE db-lcarchive $HOME/ydfs/tarballs/`basename $ARCHIVE` || touch $HOME/ydfs-error
       
	if [ -e $HOME/ydfs-error ] &&  [ "$NOTEXIT" != "OK" ]
        then
	   echo "Exit db-lcarchive $ARCHIVE, because $HOME/ydfs-error exists " 
   	   exit 1	
	fi
	# Build twice

	if [ "$BUILD_TWICE" = "yes" ] 
	then
	  echo "Building twice" # && read key
	  LC_CONFIGURE_OPTS="$LC_CONFIGURE_OPTS" LCARCHIVE_CHOICE=installfromsrc db-lcarchive $HOME/ydfs/tarballs/`basename $ARCHIVE` || touch $HOME/ydfs-error
    [ -e $HOME/ydfs-error ] && echo "Exit $ARCHIVE " && break
	  unset BUILD_TWICE
	fi
        
	# Unser variables

	unset PREFIX
	echo $ARCHIVE | grep gstreamer && unset SHELL
	echo $ARCHIVE | grep gstreamer && unset CONFIG_SHELL
	echo $ARCHIVE | grep foomatic-db-engine && unset LIBDIR
	echo $ARCHIVE | grep gutenprint && unset DESTDIR
	echo $ARCHIVE | grep glibc && unset MAKE_INSTALL
	echo $ARCHIVE | grep mysql-5 && install -d  $MYPREFIX/include/mysql && cp $MYPREFIX/include/errmsg.h $MYPREFIX/include/mysql/ && cp $MYPREFIX/include/mysql.h  $MYPREFIX/include/mysql/
	echo $ARCHIVE | grep Linux-PAM && [ ! -e $HOME/$MODULE/include/security ] && ln -s $HOME/$MODULE/include/ $HOME/$MODULE/include/security
	echo $ARCHIVE | grep netpbm && [ ! -e $DIBAB_PREFIX/$MODULE/bin/pnmtops ] && cd $HOME/ydfs/src/netpbm* && make package pkgdir=/tmp/netpbm && cp -fR /tmp/netpbm/* $DIBAB_PREFIX/$MODULE/
done

[ -e $HOME/ydfs-error ] && exit 1

if [ ! -e $HOME/$ARCH/share/fonts/dejavu-fonts-ttf-2.29 ] && [ "$ARCH" != "arm" ]
then
  echo "Get dejavu-fonts-ttf-2.29"
  install -d $HOME/$ARCH/share
  [ ! -e $HOME/ydfs/tarballs/dejavu-fonts-ttf-2.29.tar.bz2 ] && wget --directory-prefix=$HOME/ydfs/tarballs http://freefr.dl.sourceforge.net/sourceforge/dejavu/dejavu-fonts-ttf-2.29.tar.bz2
  tar xjf $HOME/ydfs/tarballs/dejavu-fonts-ttf-2.29.tar.bz2
  mv dejavu-fonts-ttf-2.29 $HOME/$ARCH/share/fonts
fi

echo > $HOME/$ARCH/buildenv
for ENV in LD_LIBRARY_PATH LIB_CUPS PATH CUPS_ETC XDG_DATA_DIRS PYTHONPATH
do
  echo 'echo $'"$ENV" > $HOME/.printenv
  echo "export $ENV=`sh $HOME/.printenv`" >> $HOME/$ARCH/buildenv
done
[ ! -e $HOME/$MODULE/buildok ] && touch $HOME/$MODULE/buildok # usefull to know which file can be wrotten into $HOME/$MODULE/ after last package build
echo "Build packages OK"
