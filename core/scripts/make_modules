# $ARCH : the core module

. $HOME/ydfs/config.ini

if [ "$BUILDYDFS" = "fast" ]
then
  echo "Building fast $1"
  echo "Building Grub"
  make updates || exit 17
  if [ -e $HOME/iso/$ARCH.squashfs ]
  then
    echo "Use buildt squashfs"
    install -d $HOME/$ARCH/bin
    install -d $LCMBUILD
    wget http://ftp.us.debian.org/debian/pool/main/s/squashfs-tools/squashfs-tools_4.4-2+deb11u2_amd64.deb
    dpkg -x squashfs-tools_4.4-2+deb11u2_amd64.deb /tmp
    cp /tmp/usr/bin/mksquashfs $HOME/$ARCH/bin
    ln -s $HOME/iso/$ARCH.squashfs $LCMBUILD
    ls -l $LCMBUILD || exit 1
    exit 0
  fi
fi

[ "$ARCH" = "arm" ] && exit 0
GUI_PATH=$HOME/$ARCH

install -d $HOME/ydfs/modules/$ARCH

DOC_FILES=" share/doc "
# ICONS_FILES="icons/handhelds icons/nuoveXT2  icons/redglass icons/ whiteglass"
LOCALE_FILES="share/locale"
DEV_FILES=" "

SKIP_FILES=" bin/mount bin/umount bin/df bin/ls var/cache/fontconfig share/gir-1.0 "
[ "$DISTRONAME" = "hackerOS" ] && SKIP_FILES=""

link_module()
{
  [ -e $HOME/ydfs/modules/$MOD ] && echo "Clear $HOME/ydfs/modules/$MOD " && rm -fR $HOME/ydfs/modules/$MOD/
  install -d $HOME/ydfs/modules/$MOD
  rsync -a --exclude '*.a' --exclude '*.c' --exclude '*.h' --exclude-from=$LIST --info=progress2 --no-inc-recursive $HOME/$ARCH $HOME/ydfs/modules --exclude-from=$LIST 
}

[ ! -e "$GUI_PATH" ] && echo "$GUI_PATH not found !" && exit 1

cd $GUI_PATH

#FIXME
[ "$ARCH" = "x86" ] && cp $HOME/x86/lib64/girepository-1.0/* $HOME/x86/lib/girepository-1.0/

install -d $HOME/ydfs/modules
#[ ! -e ../ydfs/modules/gui-list ] && find > $HOME/ydfs/modules/gui-list
#[ ! -e ../ydfs/modules/gui-list-dev ] && find -name '*.la' -o -name '*.h'-o -name 'pkgconfig' -o -name '*.a' > $HOME/ydfs/modules/gui-list-dev

#SKIP="find . ! -name '*.la' -a ! -name '*.a' ! -name '*.h' ! -name '*.c'"
#for file in oxygen/256x256 oxygen/128x128 var/cache/fontconfig share/help share/gir-1.0 sql-bench mysql-test smbtorture _embedded $SKIP_FILES src.zip $ICONS_FILES $DOC_FILES $DEV_FILES lib/pkgconfig $ARCH/include $LOCALE_FILES bin/mount bin/umount bin/df
#do
#  SKIP="$SKIP | grep -v '$file'" 
#done

echo > $HOME/ydfs/modules/gui-skip-all

for file in $SKIP_FILES $ICONS_FILES $DOC_FILES $DEV_FILES lib/pkgconfig include $LOCALE_FILES
do
  [ ! -e $HOME/$ARCH/$file ] && echo "No $file to skip" && exit 1
  echo $file >> $HOME/ydfs/modules/gui-skip-all
done

# echo $SKIP > $HOME/ydfs/modules/run-find && sh $HOME/ydfs/modules/run-find > $HOME/ydfs/modules/gui-list-all
# cat $HOME/ydfs/modules/gui-skip-all
echo "Make module .. log in  $HOME/ydfs/modules/$ARCH.log"
LIST=$HOME/ydfs/modules/gui-skip-all MOD=$ARCH FIND_FILES="/" link_module # > $HOME/ydfs/modules/$ARCH.log 2> $HOME/ydfs/modules/$ARCH.log.err
LDLINUX="ld-linux.so.2 libunwind-x86.so.8 libz3.so.4 libffi.so.7 libomp.so.5"
[ "$ARCH" = "x86_64" ] && LDLINUX="ld-linux-x86-64.so.2 libunwind-x86_64.so.8 libcrypto.so.3"
LIBLLVM=18
[ "$ARCH" = "x86" ] && LIBLLVM=11
LIBBOOST=83
#[ "$ARCH" = "x86" ] && LIBBOOST=67


[ -e /usr/lib/libboost_filesystem.so.1.49.0 ] && LIBBOOST=49

GLIBC_LIBS="$LDLINUX libatomic.so.1 libnuma.so.1 libwrap.so.0 libunwind-ptrace.so.0 libunwind.so.8 libbabeltrace.so.1 libbabeltrace-ctf.so.1 libmvec.so.1 libltdl.so.7 libedit.so.2 libmd.so.0 libbsd.so.0 libquadmath.so.0 libelf.so.1 libtinfo.so.6 libLLVM-$LIBLLVM.so.1 libpcre.so.3 libboost_locale.so.1.$LIBBOOST.0 libboost_chrono.so.1.$LIBBOOST.0 libboost_thread.so.1.$LIBBOOST.0 libboost_iostreams.so.1.$LIBBOOST.0 libboost_random.so.1.$LIBBOOST.0 libboost_regex.so.1.$LIBBOOST.0  libboost_system.so.1.$LIBBOOST.0 \
libssl.so.3 \
libboost_filesystem.so.1.$LIBBOOST.0 \
libboost_atomic.so.1.$LIBBOOST.0 \
 libboost_program_options.so.1.$LIBBOOST.0 libgomp.so.1 libmpfr.so.6 libtinfo.so.5 libanl.so.1 libBrokenLocale.so.1 libcrypt.so.1 libc.so.6 libdl.so.2 libstdc++.so.6 libgcc_s.so.1 libm.so.6 libnsl.so.2 libnsl.so.1 libnss_compat.so.2 libnss_dns.so.2 libnss_files.so.2 libnss_hesiod.so.2 libpthread.so.0 libresolv.so.2 librt.so.1 libstdc++.so.6 libthread_db.so.1 libutil.so.1"
GLIBC_BIN="ldd"

if [ "$TOOLCHAIN" = "crosstool-ng" ]
then
  cp -a $HOME/ydfs/x-tools/$CROSS_PREFIX/$CROSS_PREFIX/sysroot/lib/* $HOME/ydfs/modules/$ARCH/lib
else
  for file in $GLIBC_BIN
  do
	  install -d $HOME/ydfs/modules/$ARCH/bin
	  cp /usr/bin/$file $HOME/ydfs/modules/$ARCH/bin || exit $?
  done
	  install -d $HOME/ydfs/modules/$ARCH/lib
  for file in $GLIBC_LIBS
  do
    for directory in /usr/lib/x86_64-linux-gnu/ /lib64 /libx32/ /lib/i386-linux-gnu/ /usr/lib/gcc/i686-linux-gnu/9/ /usr/lib/gcc/x86_64-linux-gnu/9/ /usr/lib/llvm-$LIBLLVM/lib/ /lib/i386-linux-gnu /usr/lib/i386-linux-gnu /lib/i386-linux-gnu /usr/lib/x86_64-linux-gnu /lib/x86_64-linux-gnu /usr/lib $HOME/ydfs/llvm-clang/lib/ /lib/i386-linux-gnu/ /usr/lib/gcc/i686-linux-gnu/8/
    do
	[ -e $directory/$file ] && cp $directory/$file $HOME/ydfs/modules/$ARCH/lib
    done
    [ ! -e $HOME/ydfs/modules/$ARCH/lib/$file ] && [ "$file" != "libtinfo.so.5" ] && [ "$file" != "libgmp.so.10" ] && [ "$file" != "libgmp.so.3" ] && echo "where is $file ?" && touch /tmp/ko 
  done
fi

[ -e /tmp/ko ] && rm /tmp/ko && exit 45

install -d $HOME/ydfs/modules/$ARCH/share/doc
cp -a $HOME/$ARCH/share/doc/cups $HOME/ydfs/modules/$ARCH/share/doc

#cd $HOME/ydfs/modules/$ARCH/share/doc
#ls $HOME/ydfs/modules/$ARCH/share/doc | while read file
#do
#  test "$file" = "cups" && continue
#  echo "Delete $file"
#  rm -fR $HOME/ydfs/modules/$ARCH/share/doc/$file
#done
 
[ "$ARCH" = "x86" ] && [ -e /usr/lib/i386-linux-gnu/gconv ] && install -d $HOME/ydfs/modules/$ARCH/lib/i386-linux-gnu && cp -fR /usr/lib/i386-linux-gnu/gconv $HOME/ydfs/modules/$ARCH/lib/i386-linux-gnu
[ "$ARCH" = "x86_64" ] && [ -e /usr/lib/x86_64-linux-gnu/gconv ] && install -d $HOME/ydfs/modules/$ARCH/lib/x86_64-linux-gnu && cp -fR /usr/lib/x86_64-linux-gnu/gconv $HOME/ydfs/modules/$ARCH/lib/x86_64-linux-gnu
[ -e /usr/lib/gconv ] && cp -fR /usr/lib/gconv $HOME/ydfs/modules/$ARCH/lib/
install -d $HOME/ydfs/modules/$ARCH/share/locale 
cp -fR $HOME/$ARCH/share/locale/br $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/ar $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/fr $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/es $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/it $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/de $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/pt $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/cs $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/pl $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/zh_CN $HOME/ydfs/modules/$ARCH/share/locale
cp -fR $HOME/$ARCH/share/locale/ru $HOME/ydfs/modules/$ARCH/share/locale
# Enable wanted locales like es_ES.UTF-8 with 'dpkg-reconfigure locales' on debian
install -d $HOME/ydfs/modules/$ARCH/lib/locale && cp /usr/lib/locale/locale-archive $HOME/ydfs/modules/$ARCH/lib/locale
ln -sf libcurl.so.4 $HOME/ydfs/modules/$ARCH/lib/libcurl-gnutls.so.4
ln -sf $HOME/$ARCH/bin/gpg2 $HOME/ydfs/modules/$ARCH/bin/gpg
ln -sf $HOME/$ARCH/bin/gpgv $HOME/ydfs/modules/$ARCH/bin/gpgv
install -d $HOME/ydfs/modules/$ARCH/etc/ssl/certs
cp /etc/ssl/certs/* $HOME/ydfs/modules/$ARCH/etc/ssl/certs

echo "Striping  $HOME/ydfs/modules/$ARCH"
find  $HOME/ydfs/modules/$ARCH -type f \( ! -iname "*.h" ! -iname "*.hpp"  ! -iname "*.ttl" \) |while read file; do strip "$file" 2>/tmp/strip.err; done
echo done

echo "Restore grub files"
cp -a /tmp/grub/$HOME/$ARCH/* $HOME/ydfs/modules/$ARCH/

[ ! -e "$HOME/ydfs/modules/$ARCH/bin/su" ] && echo "$HOME/ydfs/modules/$ARCH/bin/su" is missing && exit 1
chmod +s $HOME/ydfs/modules/$ARCH/bin/su

[ "$ARCH" = "x86_64" ] && QTMORE="translations resources"

cp -fR /usr/share/zoneinfo/ $HOME/ydfs/modules/$ARCH/share
rmdir $HOME/ydfs/modules/$ARCH/lib64
ln -s $HOME/$ARCH/lib $HOME/ydfs/modules/$ARCH/lib64

if [ "$ARCH" = "x86_64" ]
then
export LD_LIBRARY_PATH=$HOME/x86_64/lib
else
export LD_LIBRARY_PATH=$HOME/x86/lib
fi
install -d $LCMBUILD
# rm $LCMBUILD/devtools-$ARCH.squashfs
MKSQUASHFS="$HOME/$ARCH/bin/mksquashfs "
[ "$ARCH" = "arm" ] && MKSQUASHFS=mksquashfs
rm $LCMBUILD/$ARCH.squashfs
if [ "$ARCH" = "x86_64" ]
then
	$MKSQUASHFS $HOME/ydfs/modules/$ARCH $LCMBUILD/$ARCH.squashfs -all-root $MKSQUASHFS_OPT $MKSQUASHFS_EXCLUDE
else
	# Add -processors 1 -mem 1G to avoid crashes in x86" 
	$MKSQUASHFS $HOME/ydfs/modules/$ARCH $LCMBUILD/$ARCH.squashfs -processors 1 -mem 1G -all-root $MKSQUASHFS_OPT $MKSQUASHFS_EXCLUDE
fi
